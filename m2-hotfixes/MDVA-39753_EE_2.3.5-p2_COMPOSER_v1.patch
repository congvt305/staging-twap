diff --git a/vendor/magento/module-admin-gws/Model/Plugin/IsCategoryAuthorizedForDifferentStoreUserRole.php b/vendor/magento/module-admin-gws/Model/Plugin/IsCategoryAuthorizedForDifferentStoreUserRole.php
new file mode 100644
index 00000000000..89dd3308a87
--- /dev/null
+++ b/vendor/magento/module-admin-gws/Model/Plugin/IsCategoryAuthorizedForDifferentStoreUserRole.php
@@ -0,0 +1,72 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\AdminGws\Model\Plugin;
+
+use Magento\Authorization\Model\UserContextInterface;
+use Magento\Catalog\Api\Data\CategoryInterface;
+use Magento\Catalog\Model\Category\Authorization;
+use Magento\Framework\Exception\AuthorizationException;
+use Magento\AdminGws\Model\Role as AdminRole;
+
+/**
+ * Plugin for authorization of category changes for different store user role
+ */
+class IsCategoryAuthorizedForDifferentStoreUserRole
+{
+    /**
+     * @var UserContextInterface
+     */
+    private $userContext;
+
+    /**
+     * @var AdminRole $adminRole
+     */
+    private $adminRole;
+
+    /**
+     * Initialize dependencies
+     *
+     * @param UserContextInterface $userContext
+     * @param AdminRole $adminRole
+     */
+    public function __construct(
+        UserContextInterface $userContext,
+        AdminRole $adminRole
+    ) {
+        $this->userContext = $userContext;
+        $this->adminRole = $adminRole;
+    }
+
+    /**
+     * Check if the current admin user have access to the category current store
+     *
+     * @param Authorization $subject
+     * @param CategoryInterface $category
+     * @throws AuthorizationException
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function beforeAuthorizeSavingOf(
+        Authorization $subject,
+        CategoryInterface $category
+    ): void {
+        if ($this->userContext->getUserId()
+            && $this->userContext->getUserType() === UserContextInterface::USER_TYPE_ADMIN
+        ) {
+            if (!$this->adminRole->getIsAll()) {
+                $parentIds = $category->getParentIds();
+                if (empty($parentIds)) {
+                    $parentIds = [$category->getParentId()];
+                }
+                $allowedCategoriesIds = array_keys($this->adminRole->getAllowedRootCategories());
+                if (empty(array_intersect($parentIds, $allowedCategoriesIds))) {
+                    throw new AuthorizationException(__('Not allowed to edit the category\'s design attributes'));
+                }
+            }
+        }
+    }
+}
diff --git a/vendor/magento/module-admin-gws/Plugin/VisualMerchandiser/Block/Adminhtml/Category/Merchandiser.php b/vendor/magento/module-admin-gws/Plugin/VisualMerchandiser/Block/Adminhtml/Category/Merchandiser.php
index cf34a0b8248..fb1ecd24672 100644
--- a/vendor/magento/module-admin-gws/Plugin/VisualMerchandiser/Block/Adminhtml/Category/Merchandiser.php
+++ b/vendor/magento/module-admin-gws/Plugin/VisualMerchandiser/Block/Adminhtml/Category/Merchandiser.php
@@ -7,9 +7,10 @@ declare(strict_types=1);
 
 namespace Magento\AdminGws\Plugin\VisualMerchandiser\Block\Adminhtml\Category;
 
+use Magento\AdminGws\Model\Role as AdminRole;
 use Magento\Backend\Block\Widget\Button as WidgetButton;
+use Magento\Catalog\Api\CategoryRepositoryInterface;
 use Magento\VisualMerchandiser\Block\Adminhtml\Category\Merchandiser as CategoryProductsBlock;
-use Magento\AdminGws\Model\Role as AdminRole;
 
 /**
  * Category products block plugin.
@@ -21,11 +22,20 @@ class Merchandiser
      */
     private $adminRole;
 
+    /**
+     * @var CategoryRepositoryInterface $categoryRepository
+     */
+    private $categoryRepository;
+
     /**
      * @param AdminRole $adminRole
+     * @param CategoryRepositoryInterface $categoryRepository
      */
-    public function __construct(AdminRole $adminRole)
-    {
+    public function __construct(
+        AdminRole $adminRole,
+        CategoryRepositoryInterface $categoryRepository
+    ) {
+        $this->categoryRepository = $categoryRepository;
         $this->adminRole = $adminRole;
     }
 
@@ -34,11 +44,20 @@ class Merchandiser
      *
      * @param CategoryProductsBlock $subject
      * @return void
+     * @throws \Magento\Framework\Exception\NoSuchEntityException
      */
     public function beforeToHtml(CategoryProductsBlock $subject): void
     {
-        if (! $this->adminRole->getIsAll()) {
-            $this->restrictCategoryProductsAdd($subject);
+        if (!$this->adminRole->getIsAll()) {
+            $categoryId = (int) $subject->getCategoryId();
+            $allowedCategoriesIds = array_keys($this->adminRole->getAllowedRootCategories());
+            if ($categoryId > 0 && !in_array($categoryId, $allowedCategoriesIds)) {
+                $category = $this->categoryRepository->get($categoryId);
+                $parentIds = $category->getParentIds();
+                if (empty(array_intersect($parentIds, $allowedCategoriesIds))) {
+                    $this->restrictCategoryProductsAdd($subject);
+                }
+            }
         }
     }
 
diff --git a/vendor/magento/module-admin-gws/etc/adminhtml/di.xml b/vendor/magento/module-admin-gws/etc/adminhtml/di.xml
index 74b92384306..853d2a35a8c 100644
--- a/vendor/magento/module-admin-gws/etc/adminhtml/di.xml
+++ b/vendor/magento/module-admin-gws/etc/adminhtml/di.xml
@@ -73,4 +73,7 @@
     <type name="Magento\User\Model\ResourceModel\User\Collection">
         <plugin name="admin_user_collection_size_limiter" type="Magento\AdminGws\Model\Plugin\UserCollection"/>
     </type>
+    <type name="Magento\Catalog\Model\Category\Authorization">
+        <plugin name="isCategoryAuthorizedForDifferentStoreUserRole" type="Magento\AdminGws\Model\Plugin\IsCategoryAuthorizedForDifferentStoreUserRole"/>
+    </type>
 </config>
