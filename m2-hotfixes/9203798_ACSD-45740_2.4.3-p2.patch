diff --git a/vendor/magento/module-catalog/Model/Indexer/Product/Price/AbstractAction.php b/vendor/magento/module-catalog/Model/Indexer/Product/Price/AbstractAction.php
index 404fd27232b..6b3f721d16b 100644
--- a/vendor/magento/module-catalog/Model/Indexer/Product/Price/AbstractAction.php
+++ b/vendor/magento/module-catalog/Model/Indexer/Product/Price/AbstractAction.php
@@ -172,7 +172,8 @@ abstract class AbstractAction
      * @param array $processIds
      * @return AbstractAction
      * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     * @deprecated 102.0.6 Used only for backward compatibility for indexer, which not support indexation by dimensions
+     * @deprecated 102.0.6
+     * @see Used only for backward compatibility for indexer, which not support indexation by dimensions
      */
     protected function _syncData(array $processIds = [])
     {
@@ -389,31 +390,33 @@ abstract class AbstractAction
         $changedIds = array_unique(array_merge($changedIds, ...array_values($parentProductsTypes)));
         $productsTypes = array_merge_recursive($productsTypes, $parentProductsTypes);
 
-        if ($changedIds) {
+        $typeIndexers = array_filter(
+            $this->getTypeIndexers(),
+            function ($type) use ($productsTypes) {
+                return isset($productsTypes[$type]) && !empty($productsTypes[$type]);
+            },
+            ARRAY_FILTER_USE_KEY
+        );
+        if (empty($typeIndexers)) {
             $this->deleteIndexData($changedIds);
+            return $changedIds;
         }
 
-        $typeIndexers = $this->getTypeIndexers();
         foreach ($typeIndexers as $productType => $indexer) {
-            $entityIds = $productsTypes[$productType] ?? [];
-            if (empty($entityIds)) {
-                continue;
-            }
-
+            $entityIds = $productsTypes[$productType];
             if ($indexer instanceof DimensionalIndexerInterface) {
                 foreach ($this->dimensionCollectionFactory->create() as $dimensions) {
                     $this->tableMaintainer->createMainTmpTable($dimensions);
                     $temporaryTable = $this->tableMaintainer->getMainTmpTable($dimensions);
                     $this->_emptyTable($temporaryTable);
                     $indexer->executeByDimensions($dimensions, \SplFixedArray::fromArray($entityIds, false));
-                    // copy to index
-                    $this->_insertFromTable(
-                        $temporaryTable,
-                        $this->tableMaintainer->getMainTableByDimensions($dimensions)
-                    );
+                    $mainTable = $this->tableMaintainer->getMainTableByDimensions($dimensions);
+                    $this->_insertFromTable($temporaryTable, $mainTable);
+                    $this->deleteOutdatedData($entityIds, $temporaryTable, $mainTable);
                 }
             } else {
                 // handle 3d-party indexers for backward compatibility
+                $this->deleteIndexData($changedIds);
                 $this->_emptyTable($this->_defaultIndexerResource->getIdxTable());
                 $this->_copyRelationIndexData($entityIds);
                 $indexer->reindexEntity($entityIds);
@@ -424,6 +427,30 @@ abstract class AbstractAction
         return $changedIds;
     }
 
+    /**
+     * Delete records that do not exist anymore
+     *
+     * @param array $entityIds
+     * @param string $temporaryTable
+     * @param string $mainTable
+     * @return void
+     */
+    private function deleteOutdatedData(array $entityIds, string $temporaryTable, string $mainTable): void
+    {
+        $joinCondition = [
+            'tmp_table.entity_id = main_table.entity_id',
+            'tmp_table.customer_group_id = main_table.customer_group_id',
+            'tmp_table.website_id = main_table.website_id',
+        ];
+        $select = $this->getConnection()->select()
+            ->from(['main_table' => $mainTable], null)
+            ->joinLeft(['tmp_table' => $temporaryTable], implode(' AND ', $joinCondition), null)
+            ->where('tmp_table.entity_id IS NULL')
+            ->where('main_table.entity_id IN (?)', $entityIds, \Zend_Db::INT_TYPE);
+        $query = $select->deleteFromSelect('main_table');
+        $this->getConnection()->query($query);
+    }
+
     /**
      * Delete Index data index for list of entities
      *
@@ -448,7 +475,8 @@ abstract class AbstractAction
      * @param null|array $parentIds
      * @param array $excludeIds
      * @return \Magento\Catalog\Model\Indexer\Product\Price\AbstractAction
-     * @deprecated 102.0.6 Used only for backward compatibility for do not broke custom indexer implementation
+     * @deprecated 102.0.6
+     * @see Used only for backward compatibility for do not broke custom indexer implementation
      * which do not work by dimensions.
      * For indexers, which support dimensions all composite products read data directly from main price indexer table
      * or replica table for partial or full reindex correspondingly.
