diff --git a/vendor/magento/module-bundle/Model/Product/SelectionProductsDisabledRequired.php b/vendor/magento/module-bundle/Model/Product/SelectionProductsDisabledRequired.php
deleted file mode 100644
index d3f1c2f1c999..000000000000
--- a/vendor/magento/module-bundle/Model/Product/SelectionProductsDisabledRequired.php
+++ /dev/null
@@ -1,164 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\Bundle\Model\Product;
-
-use Magento\Framework\EntityManager\MetadataPool;
-use Magento\Catalog\Model\Product\Attribute\Source\Status;
-use Magento\Bundle\Model\ResourceModel\Selection as BundleSelection;
-use Magento\Store\Model\StoreManagerInterface;
-use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory as ProductCollectionFactory;
-use Magento\Catalog\Model\Product;
-use Magento\Catalog\Api\Data\ProductInterface;
-
-/**
- * Class to return ids of options and child products when all products in required option are disabled in bundle product
- */
-class SelectionProductsDisabledRequired
-{
-    /**
-     * @var BundleSelection
-     */
-    private $bundleSelection;
-
-    /**
-     * @var StoreManagerInterface
-     */
-    private $storeManager;
-
-    /**
-     * @var Status
-     */
-    private $catalogProductStatus;
-
-    /**
-     * @var ProductCollectionFactory
-     */
-    private $productCollectionFactory;
-
-    /**
-     * @var MetadataPool
-     */
-    private $metadataPool;
-
-    /**
-     * @var string
-     */
-    private $hasStockStatusFilter = 'has_stock_status_filter';
-
-    /**
-     * @var array
-     */
-    private $productsDisabledRequired = [];
-
-    /**
-     * @param BundleSelection $bundleSelection
-     * @param StoreManagerInterface $storeManager
-     * @param Status $catalogProductStatus
-     * @param ProductCollectionFactory $productCollectionFactory
-     * @param MetadataPool $metadataPool
-     */
-    public function __construct(
-        BundleSelection $bundleSelection,
-        StoreManagerInterface $storeManager,
-        Status $catalogProductStatus,
-        ProductCollectionFactory $productCollectionFactory,
-        MetadataPool $metadataPool
-    ) {
-        $this->bundleSelection = $bundleSelection;
-        $this->storeManager = $storeManager;
-        $this->catalogProductStatus = $catalogProductStatus;
-        $this->productCollectionFactory = $productCollectionFactory;
-        $this->metadataPool = $metadataPool;
-    }
-
-    /**
-     * Return ids of options and child products when all products in required option are disabled in bundle product
-     *
-     * @param int $bundleId
-     * @param int|null $websiteId
-     * @return array
-     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
-     */
-    public function getChildProductIds(int $bundleId, ?int $websiteId = null): array
-    {
-        if (!$websiteId) {
-            $websiteId = (int)$this->storeManager->getStore()->getWebsiteId();
-        }
-        $cacheKey = $this->getCacheKey($bundleId, $websiteId);
-        if (isset($this->productsDisabledRequired[$cacheKey])) {
-            return $this->productsDisabledRequired[$cacheKey];
-        }
-        $selectionProductIds = $this->bundleSelection->getChildrenIds($bundleId);
-        /** for cases when no required products found */
-        if (count($selectionProductIds) === 1 && isset($selectionProductIds[0])) {
-            $this->productsDisabledRequired[$cacheKey] = [];
-            return $this->productsDisabledRequired[$cacheKey];
-        }
-        $products = $this->getProducts($selectionProductIds, $websiteId);
-        if (!$products) {
-            $this->productsDisabledRequired[$cacheKey] = [];
-            return $this->productsDisabledRequired[$cacheKey];
-        }
-        foreach ($selectionProductIds as $optionId => $optionProductIds) {
-            foreach ($optionProductIds as $productId) {
-                if (isset($products[$productId])) {
-                    /** @var Product $product */
-                    $product = $products[$productId];
-                    if (in_array($product->getStatus(), $this->catalogProductStatus->getVisibleStatusIds())) {
-                        unset($selectionProductIds[$optionId]);
-                    }
-                }
-            }
-        }
-        $this->productsDisabledRequired[$cacheKey] = $selectionProductIds;
-        return $this->productsDisabledRequired[$cacheKey];
-    }
-
-    /**
-     * Get products objects
-     *
-     * @param array $selectionProductIds
-     * @param int $websiteId
-     * @return ProductInterface[]
-     */
-    private function getProducts(array $selectionProductIds, int $websiteId): array
-    {
-        $productIds = [];
-        $defaultStore = $this->storeManager->getWebsite($websiteId)->getDefaultStore();
-        $defaultStoreId = $defaultStore ? $defaultStore->getId() : null;
-        foreach ($selectionProductIds as $optionProductIds) {
-            $productIds[] = $optionProductIds;
-        }
-        $productIds = array_merge([], ...$productIds);
-        $productCollection = $this->productCollectionFactory->create();
-        $productCollection->joinAttribute(
-            ProductInterface::STATUS,
-            Product::ENTITY . '/' . ProductInterface::STATUS,
-            $this->metadataPool->getMetadata(ProductInterface::class)->getLinkField(),
-            null,
-            'inner',
-            $defaultStoreId
-        );
-        $productCollection->addIdFilter($productIds);
-        $productCollection->addStoreFilter($defaultStoreId);
-        $productCollection->setFlag($this->hasStockStatusFilter, true);
-        return $productCollection->getItems();
-    }
-
-    /**
-     * Get cache key
-     *
-     * @param int $bundleId
-     * @param int $websiteId
-     * @return string
-     */
-    private function getCacheKey(int $bundleId, int $websiteId): string
-    {
-        return $bundleId . '-' . $websiteId;
-    }
-}
diff --git a/vendor/magento/module-bundle/Model/ResourceModel/Indexer/Price/DisabledProductOptionPriceModifier.php b/vendor/magento/module-bundle/Model/ResourceModel/Indexer/Price/DisabledProductOptionPriceModifier.php
deleted file mode 100644
index 0da07eaff4aa..000000000000
--- a/vendor/magento/module-bundle/Model/ResourceModel/Indexer/Price/DisabledProductOptionPriceModifier.php
+++ /dev/null
@@ -1,148 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\Bundle\Model\ResourceModel\Indexer\Price;
-
-use Magento\Bundle\Model\Product\SelectionProductsDisabledRequired;
-use Magento\Catalog\Model\Product\Type;
-use Magento\Catalog\Model\ResourceModel\Product\Indexer\Price\IndexTableStructure;
-use Magento\Framework\App\ResourceConnection;
-use Magento\Catalog\Model\Config;
-use Magento\Framework\EntityManager\MetadataPool;
-use Magento\Catalog\Model\ResourceModel\Product\Indexer\Price\PriceModifierInterface;
-use Magento\Bundle\Model\ResourceModel\Selection as BundleSelection;
-
-/**
- * Remove bundle product from price index when all products in required option are disabled
- */
-class DisabledProductOptionPriceModifier implements PriceModifierInterface
-{
-    /**
-     * @var ResourceConnection
-     */
-    private $resourceConnection;
-
-    /**
-     * @var SelectionProductsDisabledRequired
-     */
-    private $selectionProductsDisabledRequired;
-
-    /**
-     * @var array
-     */
-    private $websiteIdsOfProduct = [];
-
-    /**
-     * @var BundleSelection
-     */
-    private BundleSelection $bundleSelection;
-
-    /**
-     * @var Config
-     */
-    private Config $config;
-
-    /**
-     * @var MetadataPool
-     */
-    private MetadataPool $metadataPool;
-
-    /**
-     * @param ResourceConnection $resourceConnection
-     * @param Config $config
-     * @param MetadataPool $metadataPool
-     * @param BundleSelection $bundleSelection
-     * @param SelectionProductsDisabledRequired $selectionProductsDisabledRequired
-     */
-    public function __construct(
-        ResourceConnection $resourceConnection,
-        Config $config,
-        MetadataPool $metadataPool,
-        BundleSelection $bundleSelection,
-        SelectionProductsDisabledRequired $selectionProductsDisabledRequired
-    ) {
-        $this->resourceConnection = $resourceConnection;
-        $this->config = $config;
-        $this->metadataPool = $metadataPool;
-        $this->bundleSelection = $bundleSelection;
-        $this->selectionProductsDisabledRequired = $selectionProductsDisabledRequired;
-    }
-
-    /**
-     * Remove bundle product from price index when all products in required option are disabled
-     *
-     * @param IndexTableStructure $priceTable
-     * @param array $entityIds
-     * @return void
-     * @throws \Magento\Framework\Exception\LocalizedException
-     */
-    public function modifyPrice(IndexTableStructure $priceTable, array $entityIds = []) : void
-    {
-        foreach ($this->getBundleIds($entityIds) as $entityId) {
-            $entityId = (int) $entityId;
-            foreach ($this->getWebsiteIdsOfProduct($entityId) as $websiteId) {
-                $productIdsDisabledRequired = $this->selectionProductsDisabledRequired
-                    ->getChildProductIds($entityId, (int)$websiteId);
-                if ($productIdsDisabledRequired) {
-                    $connection = $this->resourceConnection->getConnection('indexer');
-                    $select = $connection->select();
-                    $select->from(['price_index' => $priceTable->getTableName()], []);
-                    $priceEntityField = $priceTable->getEntityField();
-                    $select->where('price_index.website_id = ?', $websiteId);
-                    $select->where("price_index.{$priceEntityField} = ?", $entityId);
-                    $query = $select->deleteFromSelect('price_index');
-                    $connection->query($query);
-                }
-            }
-        }
-    }
-
-    /**
-     * Get all website ids of product
-     *
-     * @param int $entityId
-     * @return array
-     */
-    private function getWebsiteIdsOfProduct(int $entityId): array
-    {
-        if (isset($this->websiteIdsOfProduct[$entityId])) {
-            return $this->websiteIdsOfProduct[$entityId];
-        }
-        $connection = $this->resourceConnection->getConnection('indexer');
-        $select = $connection->select();
-        $select->from(
-            ['product_in_websites' => $this->resourceConnection->getTableName('catalog_product_website')],
-            ['website_id']
-        )->where('product_in_websites.product_id = ?', $entityId);
-        foreach ($connection->fetchCol($select) as $websiteId) {
-            $this->websiteIdsOfProduct[$entityId][] = (int)$websiteId;
-        }
-        return $this->websiteIdsOfProduct[$entityId];
-    }
-
-    /**
-     * Get Bundle Ids
-     *
-     * @param array $entityIds
-     * @return \Traversable
-     */
-    private function getBundleIds(array $entityIds): \Traversable
-    {
-        $connection = $this->resourceConnection->getConnection('indexer');
-        $select = $connection->select();
-        $select->from(
-            ['cpe' => $this->resourceConnection->getTableName('catalog_product_entity')],
-            ['entity_id']
-        )->where('cpe.entity_id in ( ? )', !empty($entityIds) ? $entityIds : [0], \Zend_Db::INT_TYPE)
-        ->where('type_id = ?', Type::TYPE_BUNDLE);
-
-        $statement = $select->query();
-        while ($id = $statement->fetchColumn()) {
-            yield $id;
-        }
-    }
-}
diff --git a/vendor/magento/module-bundle/Plugin/Catalog/Helper/Product.php b/vendor/magento/module-bundle/Plugin/Catalog/Helper/Product.php
deleted file mode 100644
index 0b090b2cbad7..000000000000
--- a/vendor/magento/module-bundle/Plugin/Catalog/Helper/Product.php
+++ /dev/null
@@ -1,82 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\Bundle\Plugin\Catalog\Helper;
-
-use Magento\Catalog\Model\Product as ProductModel;
-use Magento\Catalog\Model\Product\Type;
-use Magento\Catalog\Helper\Product as Subject;
-use Magento\Bundle\Model\Product\SelectionProductsDisabledRequired;
-use Magento\Framework\App\Config\ScopeConfigInterface;
-use Magento\CatalogInventory\Model\Configuration;
-use Magento\Store\Model\ScopeInterface;
-use Magento\Catalog\Api\ProductRepositoryInterface;
-
-/**
- * Plugin to not show bundle product when all products in required option are disabled
- */
-class Product
-{
-    /**
-     * @var SelectionProductsDisabledRequired
-     */
-    private $selectionProductsDisabledRequired;
-
-    /**
-     * @var ScopeConfigInterface
-     */
-    private $scopeConfig;
-
-    /**
-     * @var ProductRepositoryInterface
-     */
-    private $productRepository;
-
-    /**
-     * @param SelectionProductsDisabledRequired $selectionProductsDisabledRequired
-     * @param ScopeConfigInterface $scopeConfig
-     * @param ProductRepositoryInterface $productRepository
-     */
-    public function __construct(
-        SelectionProductsDisabledRequired $selectionProductsDisabledRequired,
-        ScopeConfigInterface $scopeConfig,
-        ProductRepositoryInterface $productRepository
-    ) {
-        $this->selectionProductsDisabledRequired = $selectionProductsDisabledRequired;
-        $this->scopeConfig = $scopeConfig;
-        $this->productRepository = $productRepository;
-    }
-
-    /**
-     * Do not show bundle product when all products in required option are disabled
-     *
-     * @param Subject $subject
-     * @param bool $result
-     * @param ProductModel|int $product
-     * @return bool
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function afterCanShow(Subject $subject, $result, $product)
-    {
-        if (is_int($product)) {
-            $product = $this->productRepository->getById($product);
-        }
-        $productId = (int)$product->getEntityId();
-        if ($result == false || $product->getTypeId() !== Type::TYPE_BUNDLE) {
-            return $result;
-        }
-        $isShowOutOfStock = $this->scopeConfig->getValue(
-            Configuration::XML_PATH_SHOW_OUT_OF_STOCK,
-            ScopeInterface::SCOPE_STORE
-        );
-        if ($isShowOutOfStock) {
-            return $result;
-        }
-        $productIdsDisabledRequired = $this->selectionProductsDisabledRequired->getChildProductIds($productId);
-        return $productIdsDisabledRequired ? false : $result;
-    }
-}
diff --git a/vendor/magento/module-bundle/etc/di.xml b/vendor/magento/module-bundle/etc/di.xml
index c5c4a491234e..47329a0afdcd 100644
--- a/vendor/magento/module-bundle/etc/di.xml
+++ b/vendor/magento/module-bundle/etc/di.xml
@@ -276,13 +276,6 @@
             </argument>
         </arguments>
     </type>
-    <type name="Magento\Catalog\Model\ResourceModel\Product\Indexer\Price\BasePriceModifier">
-        <arguments>
-            <argument name="priceModifiers" xsi:type="array">
-                <item name="DisabledProductOptionPriceModifier" xsi:type="object">Magento\Bundle\Model\ResourceModel\Indexer\Price\DisabledProductOptionPriceModifier</item>
-            </argument>
-        </arguments>
-    </type>
     <type name="Magento\CatalogInventory\Observer\SaveInventoryDataObserver">
         <arguments>
             <argument name="parentItemProcessorPool" xsi:type="array">
diff --git a/vendor/magento/module-bundle/etc/frontend/di.xml b/vendor/magento/module-bundle/etc/frontend/di.xml
index 411cf91cbc8b..54f5ff0a1f48 100644
--- a/vendor/magento/module-bundle/etc/frontend/di.xml
+++ b/vendor/magento/module-bundle/etc/frontend/di.xml
@@ -22,7 +22,4 @@
     <type name="Magento\Catalog\ViewModel\Product\OptionsData">
         <plugin name="add_bundle_options_data" type="Magento\Bundle\Plugin\Catalog\ViewModel\Product\AddBundleOptionsData" />
     </type>
-    <type name="Magento\Catalog\Helper\Product">
-        <plugin name="dont_show_if_child_products_disabled" type="Magento\Bundle\Plugin\Catalog\Helper\Product"/>
-    </type>
 </config>
diff --git a/vendor/magento/module-bundle-graph-ql/Model/Resolver/Products/DataProvider/Product/DisabledProductOptionPostProcessor.php b/vendor/magento/module-bundle-graph-ql/Model/Resolver/Products/DataProvider/Product/DisabledProductOptionPostProcessor.php
deleted file mode 100644
index 8887fa14fd8c..000000000000
--- a/vendor/magento/module-bundle-graph-ql/Model/Resolver/Products/DataProvider/Product/DisabledProductOptionPostProcessor.php
+++ /dev/null
@@ -1,70 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\BundleGraphQl\Model\Resolver\Products\DataProvider\Product;
-
-use Magento\Catalog\Model\ResourceModel\Product\Collection;
-use Magento\CatalogGraphQl\Model\Resolver\Products\DataProvider\Product\CollectionPostProcessorInterface;
-use Magento\GraphQl\Model\Query\ContextInterface;
-use Magento\Catalog\Model\Product;
-use Magento\Bundle\Model\Product\SelectionProductsDisabledRequired;
-
-/**
- * Remove bundle product from collection when all products in required option are disabled
- */
-class DisabledProductOptionPostProcessor implements CollectionPostProcessorInterface
-{
-    /**
-     * @var SelectionProductsDisabledRequired
-     */
-    private $selectionProductsDisabledRequired;
-
-    /**
-     * @param SelectionProductsDisabledRequired $selectionProductsDisabledRequired
-     */
-    public function __construct(
-        SelectionProductsDisabledRequired $selectionProductsDisabledRequired
-    ) {
-        $this->selectionProductsDisabledRequired = $selectionProductsDisabledRequired;
-    }
-
-    /**
-     * Remove bundle product from collection when all products in required option are disabled
-     *
-     * @param Collection $collection
-     * @param array $attributeNames
-     * @param ContextInterface|null $context
-     * @return Collection
-     * @throws \Magento\Framework\Exception\LocalizedException
-     * @throws \Magento\Framework\Exception\NoSuchEntityException
-     */
-    public function process(
-        Collection $collection,
-        array $attributeNames,
-        ?ContextInterface $context = null
-    ): Collection {
-        if (!$collection->isLoaded()) {
-            $collection->load();
-        }
-        /** @var Product $product */
-        foreach ($collection as $key => $product) {
-            if ($product->getTypeId() !== Product\Type::TYPE_BUNDLE || $context === null) {
-                continue;
-            }
-            $productId = (int)$product->getEntityId();
-            $websiteId = (int)$context->getExtensionAttributes()->getStore()->getWebsiteId();
-            $productIdsDisabledRequired = $this->selectionProductsDisabledRequired->getChildProductIds(
-                $productId,
-                $websiteId
-            );
-            if ($productIdsDisabledRequired) {
-                $collection->removeItemByKey($key);
-            }
-        }
-        return $collection;
-    }
-}
diff --git a/vendor/magento/module-bundle-graph-ql/etc/di.xml b/vendor/magento/module-bundle-graph-ql/etc/di.xml
index 879359839a64..15acad7c6bf0 100644
--- a/vendor/magento/module-bundle-graph-ql/etc/di.xml
+++ b/vendor/magento/module-bundle-graph-ql/etc/di.xml
@@ -23,11 +23,4 @@
             </argument>
         </arguments>
     </type>
-    <type name="Magento\CatalogGraphQl\Model\Resolver\Products\DataProvider\Product\CompositeCollectionPostProcessor">
-        <arguments>
-            <argument name="collectionPostProcessors" xsi:type="array">
-                <item name="disabled_product_option" xsi:type="object">Magento\BundleGraphQl\Model\Resolver\Products\DataProvider\Product\DisabledProductOptionPostProcessor</item>
-            </argument>
-        </arguments>
-    </type>
 </config>
diff --git a/vendor/magento/module-inventory-catalog-search/Model/Indexer/FilterProductByStock.php b/vendor/magento/module-inventory-catalog-search/Model/Indexer/FilterProductByStock.php
index 89b6f23ca4cf..36851f4b134f 100644
--- a/vendor/magento/module-inventory-catalog-search/Model/Indexer/FilterProductByStock.php
+++ b/vendor/magento/module-inventory-catalog-search/Model/Indexer/FilterProductByStock.php
@@ -7,12 +7,8 @@
 
 namespace Magento\InventoryCatalogSearch\Model\Indexer;
 
-use Magento\Framework\App\ResourceConnection;
+use Magento\CatalogInventory\Model\ResourceModel\StockStatusFilterInterface;
 use Magento\Framework\DB\Select;
-use Magento\Framework\Exception\NoSuchEntityException;
-use Magento\InventoryCatalogApi\Api\DefaultStockProviderInterface;
-use Magento\InventoryIndexer\Model\StockIndexTableNameResolverInterface;
-use Magento\InventorySalesApi\Model\StockByWebsiteIdResolverInterface;
 use Magento\Store\Api\StoreRepositoryInterface;
 
 /**
@@ -21,57 +17,32 @@
 class FilterProductByStock
 {
     /**
-     * @var DefaultStockProviderInterface
-     */
-    private $defaultStockProvider;
-
-    /**
-     * @var ResourceConnection
-     */
-    private $resourceConnection;
-
-    /**
-     * @var StockByWebsiteIdResolverInterface
+     * @var StoreRepositoryInterface
      */
-    private $stockByWebsiteIdResolver;
+    private $storeRepository;
 
     /**
-     * @var StockIndexTableNameResolverInterface
+     * @var StockStatusFilterInterface
      */
-    private $stockIndexTableNameResolver;
+    private $stockStatusFilter;
 
     /**
-     * @var StoreRepositoryInterface
-     */
-    private $storeRepository;
-
-    /**
-     * @var array
+     * @var SelectModifierInterface[]
      */
     private $selectModifiersPool;
 
     /**
-     * @param DefaultStockProviderInterface $defaultStockProvider
-     * @param ResourceConnection $resourceConnection
-     * @param StockByWebsiteIdResolverInterface $stockByWebsiteIdResolver
-     * @param StockIndexTableNameResolverInterface $stockIndexTableNameResolver
      * @param StoreRepositoryInterface $storeRepository
-     * @param array $selectModifiersPool
+     * @param StockStatusFilterInterface $stockStatusFilter
+     * @param SelectModifierInterface[] $selectModifiersPool
      */
     public function __construct(
-        DefaultStockProviderInterface $defaultStockProvider,
-        ResourceConnection $resourceConnection,
-        StockByWebsiteIdResolverInterface $stockByWebsiteIdResolver,
-        StockIndexTableNameResolverInterface $stockIndexTableNameResolver,
         StoreRepositoryInterface $storeRepository,
+        StockStatusFilterInterface $stockStatusFilter,
         array $selectModifiersPool = []
-    )
-    {
-        $this->defaultStockProvider = $defaultStockProvider;
-        $this->resourceConnection = $resourceConnection;
-        $this->stockByWebsiteIdResolver = $stockByWebsiteIdResolver;
-        $this->stockIndexTableNameResolver = $stockIndexTableNameResolver;
+    ) {
         $this->storeRepository = $storeRepository;
+        $this->stockStatusFilter = $stockStatusFilter;
         $this->selectModifiersPool = $selectModifiersPool;
     }
 
@@ -81,34 +52,17 @@ public function __construct(
      * @param Select $select
      * @param int $storeId
      * @return Select
-     * @throws NoSuchEntityException
      */
     public function execute(Select $select, int $storeId): Select
     {
         $store = $this->storeRepository->getById($storeId);
-        try {
-            $stock = $this->stockByWebsiteIdResolver->execute((int)$store->getWebsiteId());
-        } catch (NoSuchEntityException $exception) {
-            return $select;
-        }
-
-        $stockId = $stock->getStockId();
-        $stockTable = $this->stockIndexTableNameResolver->execute($stockId);
-        $connection = $this->resourceConnection->getConnection();
-
-        if ($this->defaultStockProvider->getId() === $stockId ||
-            !$connection->isTableExists($stockTable)) {
-            return $select;
-        }
-
-        $select->joinInner(
-            ['stock' => $stockTable],
-            'e.sku = stock.sku',
-            []
+        $this->stockStatusFilter->execute(
+            $select,
+            'e',
+            StockStatusFilterInterface::TABLE_ALIAS,
+            (int) $store->getWebsiteId()
         );
-
-        $select->where('stock.is_salable = ?', 1);
-        $this->applySelectModifiers($select, $stockTable);
+        $this->applySelectModifiers($select, $storeId);
 
         return $select;
     }
@@ -117,13 +71,13 @@ public function execute(Select $select, int $storeId): Select
      * Applying filters to select via select modifiers
      *
      * @param Select $select
-     * @param string $stockTable
+     * @param int $storeId
      * @return void
      */
-    private function applySelectModifiers(Select $select, string $stockTable): void
+    private function applySelectModifiers(Select $select, int $storeId): void
     {
         foreach ($this->selectModifiersPool as $selectModifier) {
-            $selectModifier->modify($select, $stockTable);
+            $selectModifier->modify($select, $storeId);
         }
     }
 }
diff --git a/vendor/magento/module-inventory-catalog-search/Model/Indexer/SelectModifierInterface.php b/vendor/magento/module-inventory-catalog-search/Model/Indexer/SelectModifierInterface.php
index 29b406f6a612..cf05560efe18 100644
--- a/vendor/magento/module-inventory-catalog-search/Model/Indexer/SelectModifierInterface.php
+++ b/vendor/magento/module-inventory-catalog-search/Model/Indexer/SelectModifierInterface.php
@@ -18,8 +18,8 @@ interface SelectModifierInterface
      * Add stock item filter to select
      *
      * @param Select $select
-     * @param string $stockTable
+     * @param int $storeId
      * @return void
      */
-    public function modify(Select $select, string $stockTable): void;
+    public function modify(Select $select, int $storeId): void;
 }
diff --git a/vendor/magento/module-inventory-catalog-search-bundle-product/Model/CatalogSearch/Indexer/BundleChildStockStatusModifier.php b/vendor/magento/module-inventory-catalog-search-bundle-product/Model/CatalogSearch/Indexer/BundleChildStockStatusModifier.php
index 1fc119db67eb..700271c74d5a 100644
--- a/vendor/magento/module-inventory-catalog-search-bundle-product/Model/CatalogSearch/Indexer/BundleChildStockStatusModifier.php
+++ b/vendor/magento/module-inventory-catalog-search-bundle-product/Model/CatalogSearch/Indexer/BundleChildStockStatusModifier.php
@@ -9,23 +9,20 @@
 
 use Magento\Bundle\Model\Product\Type;
 use Magento\Catalog\Api\Data\ProductInterface;
-use Magento\Catalog\Model\Product;
-use Magento\Eav\Model\Config;
+use Magento\Catalog\Api\ProductAttributeRepositoryInterface;
+use Magento\Catalog\Model\Product\Attribute\Source\Status;
+use Magento\CatalogInventory\Model\ResourceModel\Stock\Status as StockStatusResource;
 use Magento\Framework\App\ResourceConnection;
 use Magento\Framework\DB\Select;
 use Magento\Framework\EntityManager\MetadataPool;
 use Magento\InventoryCatalogSearch\Model\Indexer\SelectModifierInterface;
+use Magento\Store\Api\StoreRepositoryInterface;
 
 /**
  * Filter bundle products by enabled child products stock status.
  */
 class BundleChildStockStatusModifier implements SelectModifierInterface
 {
-    /**
-     * @var Config
-     */
-    private $eavConfig;
-
     /**
      * @var MetadataPool
      */
@@ -37,57 +34,128 @@ class BundleChildStockStatusModifier implements SelectModifierInterface
     private $resourceConnection;
 
     /**
-     * @param Config $eavConfig
+     * @var ProductAttributeRepositoryInterface
+     */
+    private $productAttributeRepository;
+
+    /**
+     * @var StoreRepositoryInterface
+     */
+    private $storeRepository;
+
+    /**
+     * @var StockStatusResource
+     */
+    private $stockStatusResource;
+
+    /**
      * @param MetadataPool $metadataPool
      * @param ResourceConnection $resourceConnection
+     * @param ProductAttributeRepositoryInterface $productAttributeRepository
+     * @param StoreRepositoryInterface $storeRepository
+     * @param StockStatusResource $stockStatusResource
      */
     public function __construct(
-        Config $eavConfig,
         MetadataPool $metadataPool,
-        ResourceConnection $resourceConnection
+        ResourceConnection $resourceConnection,
+        ProductAttributeRepositoryInterface $productAttributeRepository,
+        StoreRepositoryInterface $storeRepository,
+        StockStatusResource $stockStatusResource
     ) {
-        $this->eavConfig = $eavConfig;
         $this->metadataPool = $metadataPool;
         $this->resourceConnection = $resourceConnection;
+        $this->productAttributeRepository = $productAttributeRepository;
+        $this->storeRepository = $storeRepository;
+        $this->stockStatusResource = $stockStatusResource;
     }
 
     /**
-     * Add stock item filter to select
-     *
-     * @param Select $select
-     * @param string $stockTable
-     * @return void
+     * @inheritdoc
      */
-    public function modify(Select $select, string $stockTable): void
+    public function modify(Select $select, int $storeId): void
     {
         $connection = $this->resourceConnection->getConnection();
         $metadata = $this->metadataPool->getMetadata(ProductInterface::class);
         $linkField = $metadata->getLinkField();
-        $statusAttribute = $this->eavConfig->getAttribute(Product::ENTITY, 'status');
-        $existsSelect = $connection->select()->from(
-            ['product_link_bundle' => $this->resourceConnection->getTableName('catalog_product_bundle_selection')],
-            [new \Zend_Db_Expr('1')]
-        )->where(
-            "product_link_bundle.parent_product_id = e.{$linkField}"
-        );
-        $existsSelect->join(
-            ['bundle_product_child' => $this->resourceConnection->getTableName('catalog_product_entity')],
-            'bundle_product_child.entity_id = product_link_bundle.product_id',
+        $optionsAvailabilitySelect = $connection->select()->from(
+            ['bundle_options' => $this->resourceConnection->getTableName('catalog_product_bundle_option')],
+            []
+        )->joinInner(
+            ['bundle_selections' => $this->resourceConnection->getTableName('catalog_product_bundle_selection')],
+            'bundle_selections.option_id = bundle_options.option_id',
+            []
+        )->joinInner(
+            // table alias must be "e" for joining the stock status
+            ['e' => $this->resourceConnection->getTableName('catalog_product_entity')],
+            'e.entity_id = bundle_selections.product_id',
             []
+        )->group(
+            ['bundle_options.parent_id', 'bundle_options.option_id']
         );
 
-        $existsSelect->join(
-            ['child_product_status' => $this->resourceConnection->getTableName($statusAttribute->getBackendTable())],
-            "bundle_product_child.{$linkField} = child_product_status.{$linkField} AND "
-            . "child_product_status.attribute_id = " . $statusAttribute->getId(),
+        $statusAttribute = $this->productAttributeRepository->get(ProductInterface::STATUS);
+        $optionsAvailabilitySelect->joinLeft(
+            ['child_status_global' => $statusAttribute->getBackendTable()],
+            "child_status_global.{$linkField} = e.{$linkField}"
+            . " AND child_status_global.attribute_id = {$statusAttribute->getAttributeId()}"
+            . " AND child_status_global.store_id = 0",
             []
-        )->where('child_product_status.value = 1');
+        )->joinLeft(
+            ['child_status_store' => $statusAttribute->getBackendTable()],
+            "child_status_store.{$linkField} = e.{$linkField}"
+            . " AND child_status_store.attribute_id = {$statusAttribute->getAttributeId()}"
+            . " AND child_status_store.store_id = {$storeId}",
+            []
+        );
 
-        $existsSelect->join(
-            ['stock_status_index_child' => $stockTable],
-            'bundle_product_child.sku = stock_status_index_child.sku',
+        $store = $this->storeRepository->getById($storeId);
+        $this->stockStatusResource->addStockStatusToSelect($optionsAvailabilitySelect, $store->getWebsite());
+        $optionsAvailabilitySelect->joinLeft(
+            ['children_website' => $this->resourceConnection->getTableName('catalog_product_website')],
+            "e.entity_id = children_website.product_id AND children_website.website_id = " . $store->getWebsiteId(),
             []
-        )->where('stock_status_index_child.is_salable = 1');
+        );
+        $columns = array_column($optionsAvailabilitySelect->getPart(Select::COLUMNS), 1, 2);
+        $isSalableColumn = $columns['is_salable'];
+
+        $optionAvailabilityExpr = sprintf(
+            'IFNULL(child_status_store.value, child_status_global.value) != %s AND %s = 1',
+            Status::STATUS_DISABLED,
+            $isSalableColumn
+        );
+
+        $isOptionSalableExpr = new \Zend_Db_Expr('MAX(' . $optionAvailabilityExpr . ')');
+        $isRequiredOptionUnsalable = $connection->getCheckSql(
+            'required = 1 AND ' . $isOptionSalableExpr . ' = 0',
+            '1',
+            '0'
+        );
+        $optionsAvailabilitySelect->columns([
+            'parent_id' => 'bundle_options.parent_id',
+            'required' => 'bundle_options.required',
+            'is_available' => $isOptionSalableExpr,
+            'is_required_and_unavailable' => $isRequiredOptionUnsalable,
+            'child_website_id' => new \Zend_Db_Expr('IFNULL(children_website.website_id, -1)')
+        ]);
+        $isBundleAvailableExpr = new \Zend_Db_Expr(
+            '(
+                MAX(is_available) = 1 AND
+                MAX(is_required_and_unavailable) = 0 AND
+                MIN(child_website_id = ' . $store->getWebsiteId() . ' OR (child_website_id = -1 AND required = 0)) = 1
+                )'
+        );
+        $websiteFilteredOptions = $connection->select();
+        $websiteFilteredOptions->reset();
+        $websiteFilteredOptions->from($optionsAvailabilitySelect)
+            ->where("(required = 0 AND child_website_id > 0) OR required = 1");
+        $bundleAvailabilitySelect = $connection->select()
+            ->from($websiteFilteredOptions, ['parent_id' => 'parent_id', 'is_available' => $isBundleAvailableExpr])
+            ->group('parent_id');
+
+        $existsSelect = $connection->select()
+            ->from($bundleAvailabilitySelect, [new \Zend_Db_Expr('1')])
+            ->where('is_available = 1')
+            ->where("parent_id = e.{$linkField}");
         $typeBundle = Type::TYPE_CODE;
         $select->where(
             "e.type_id != '{$typeBundle}' OR EXISTS ({$existsSelect->assemble()})"
diff --git a/vendor/magento/module-inventory-catalog-search-configurable-product/Model/CatalogSearch/Indexer/ConfigurableChildStockStatusModifier.php b/vendor/magento/module-inventory-catalog-search-configurable-product/Model/CatalogSearch/Indexer/ConfigurableChildStockStatusModifier.php
index 5e54cac38980..e8682d665da3 100644
--- a/vendor/magento/module-inventory-catalog-search-configurable-product/Model/CatalogSearch/Indexer/ConfigurableChildStockStatusModifier.php
+++ b/vendor/magento/module-inventory-catalog-search-configurable-product/Model/CatalogSearch/Indexer/ConfigurableChildStockStatusModifier.php
@@ -8,24 +8,21 @@
 namespace Magento\InventoryCatalogSearchConfigurableProduct\Model\CatalogSearch\Indexer;
 
 use Magento\Catalog\Api\Data\ProductInterface;
-use Magento\Catalog\Model\Product;
+use Magento\Catalog\Api\ProductAttributeRepositoryInterface;
+use Magento\Catalog\Model\Product\Attribute\Source\Status;
+use Magento\CatalogInventory\Model\ResourceModel\StockStatusFilterInterface;
 use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
-use Magento\Eav\Model\Config;
 use Magento\Framework\App\ResourceConnection;
 use Magento\Framework\DB\Select;
 use Magento\Framework\EntityManager\MetadataPool;
 use Magento\InventoryCatalogSearch\Model\Indexer\SelectModifierInterface;
+use Magento\Store\Api\StoreRepositoryInterface;
 
 /**
  * Filter configurable products by enabled child products stock status.
  */
 class ConfigurableChildStockStatusModifier implements SelectModifierInterface
 {
-    /**
-     * @var Config
-     */
-    private $eavConfig;
-
     /**
      * @var MetadataPool
      */
@@ -36,34 +33,50 @@ class ConfigurableChildStockStatusModifier implements SelectModifierInterface
      */
     private $resourceConnection;
 
+    /**
+     * @var ProductAttributeRepositoryInterface
+     */
+    private $productAttributeRepository;
+
+    /**
+     * @var StoreRepositoryInterface
+     */
+    private $storeRepository;
+
+    /**
+     * @var StockStatusFilterInterface
+     */
+    private $stockStatusFilter;
+
     /**
      * @param MetadataPool $metadataPool
-     * @param Config $eavConfig
      * @param ResourceConnection $resourceConnection
+     * @param ProductAttributeRepositoryInterface $productAttributeRepository
+     * @param StoreRepositoryInterface $storeRepository
+     * @param StockStatusFilterInterface $stockStatusFilter
      */
     public function __construct(
         MetadataPool $metadataPool,
-        Config $eavConfig,
-        ResourceConnection $resourceConnection
+        ResourceConnection $resourceConnection,
+        ProductAttributeRepositoryInterface $productAttributeRepository,
+        StoreRepositoryInterface $storeRepository,
+        StockStatusFilterInterface $stockStatusFilter
     ) {
         $this->metadataPool = $metadataPool;
-        $this->eavConfig = $eavConfig;
         $this->resourceConnection = $resourceConnection;
+        $this->productAttributeRepository = $productAttributeRepository;
+        $this->storeRepository = $storeRepository;
+        $this->stockStatusFilter = $stockStatusFilter;
     }
 
     /**
-     * Add stock item filter to select
-     *
-     * @param Select $select
-     * @param string $stockTable
-     * @return void
+     * @inheritdoc
      */
-    public function modify(Select $select, string $stockTable): void
+    public function modify(Select $select, int $storeId): void
     {
         $connection = $this->resourceConnection->getConnection();
         $metadata = $this->metadataPool->getMetadata(ProductInterface::class);
         $linkField = $metadata->getLinkField();
-        $statusAttribute = $this->eavConfig->getAttribute(Product::ENTITY, 'status');
         $existsSelect = $connection->select()->from(
             ['product_link_configurable' => $this->resourceConnection->getTableName('catalog_product_super_link')],
             [new \Zend_Db_Expr('1')]
@@ -76,18 +89,31 @@ public function modify(Select $select, string $stockTable): void
             []
         );
 
-        $existsSelect->join(
-            ['child_product_status' => $this->resourceConnection->getTableName($statusAttribute->getBackendTable())],
-            "product_child.{$linkField} = child_product_status.{$linkField} AND "
-            . "child_product_status.attribute_id = " . $statusAttribute->getId(),
+        $statusAttribute = $this->productAttributeRepository->get(ProductInterface::STATUS);
+        $existsSelect->joinLeft(
+            ['child_status_global' => $statusAttribute->getBackendTable()],
+            "child_status_global.{$linkField} = product_child.{$linkField}"
+            . " AND child_status_global.attribute_id = {$statusAttribute->getAttributeId()}"
+            . " AND child_status_global.store_id = 0",
             []
-        )->where('child_product_status.value = 1');
-
-        $existsSelect->join(
-            ['stock_status_index_child' => $stockTable],
-            'product_child.sku = stock_status_index_child.sku',
+        )->joinLeft(
+            ['child_status_store' => $statusAttribute->getBackendTable()],
+            "child_status_store.{$linkField} = product_child.{$linkField}"
+            . " AND child_status_store.attribute_id = {$statusAttribute->getAttributeId()}"
+            . " AND child_status_store.store_id = {$storeId}",
             []
-        )->where('stock_status_index_child.is_salable = 1');
+        )->where(
+            'IFNULL(child_status_store.value, child_status_global.value) != ' . Status::STATUS_DISABLED
+        );
+
+        $store = $this->storeRepository->getById($storeId);
+        $this->stockStatusFilter->execute(
+            $existsSelect,
+            'product_child',
+            StockStatusFilterInterface::TABLE_ALIAS,
+            (int) $store->getWebsiteId()
+        );
+
         $typeConfigurable = Configurable::TYPE_CODE;
         $select->where(
             "e.type_id != '{$typeConfigurable}' OR EXISTS ({$existsSelect->assemble()})"
