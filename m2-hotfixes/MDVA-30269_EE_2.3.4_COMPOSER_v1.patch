diff --git a/vendor/magento/module-ui/Component/Form/Element/DataType/Date.php b/vendor/magento/module-ui/Component/Form/Element/DataType/Date.php
index 31d2fe786cf..536e26b62db 100644
--- a/vendor/magento/module-ui/Component/Form/Element/DataType/Date.php
+++ b/vendor/magento/module-ui/Component/Form/Element/DataType/Date.php
@@ -111,7 +111,7 @@ class Date extends AbstractDataType
     public function convertDate($date, $hour = 0, $minute = 0, $second = 0, $setUtcTimeZone = true)
     {
         try {
-            $dateObj = $this->localeDate->date($date, $this->getLocale(), true);
+            $dateObj = $this->localeDate->date($date, $this->getLocale(), false, false);
             $dateObj->setTime($hour, $minute, $second);
             //convert store date to default date in UTC timezone without DST
             if ($setUtcTimeZone) {
diff --git a/vendor/magento/framework/Stdlib/DateTime/Intl/DateFormatterFactory.php b/vendor/magento/framework/Stdlib/DateTime/Intl/DateFormatterFactory.php
new file mode 100644
index 00000000000..42a381535b8
--- /dev/null
+++ b/vendor/magento/framework/Stdlib/DateTime/Intl/DateFormatterFactory.php
@@ -0,0 +1,104 @@
+<?php
+/**
+ * Copyright Â© Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\Framework\Stdlib\DateTime\Intl;
+
+/**
+ * Class to get Intl date formatter by locale
+ */
+class DateFormatterFactory
+{
+    /**
+     * Custom date formats by locale
+     */
+    private const CUSTOM_DATE_FORMATS = [
+        'ar_SA' => [
+            \IntlDateFormatter::SHORT => 'd/MM/y',
+        ]
+    ];
+
+    /**
+     * Create Intl Date formatter
+     *
+     * The Intl Date formatter gives date formats by ICU standard.
+     * http://userguide.icu-project.org/formatparse/datetime
+     *
+     * @param string $locale
+     * @param int $dateStyle
+     * @param int $timeStyle
+     * @param string|null $timeZone
+     * @param bool $useFourDigitsForYear
+     * @return \IntlDateFormatter
+     */
+    public function create(
+        string $locale,
+        int $dateStyle,
+        int $timeStyle,
+        ?string $timeZone = null,
+        bool $useFourDigitsForYear = true
+    ): \IntlDateFormatter {
+        $formatter = new \IntlDateFormatter(
+            $locale,
+            $dateStyle,
+            $timeStyle,
+            $timeZone
+        );
+        /**
+         * Process custom date formats
+         */
+        $customDateFormat = $this->getCustomDateFormat($locale, $dateStyle, $timeStyle);
+        if ($customDateFormat !== null) {
+            $formatter->setPattern($customDateFormat);
+        } elseif ($dateStyle === \IntlDateFormatter::SHORT && $useFourDigitsForYear) {
+            /**
+             * Gives 4 places for year value in short style
+             */
+            $longYearPattern = $this->setFourYearPlaces((string)$formatter->getPattern());
+            $formatter->setPattern($longYearPattern);
+        }
+
+        return $formatter;
+    }
+
+    /**
+     * Get custom date format if it exists
+     *
+     * @param string $locale
+     * @param int $dateStyle
+     * @param int $timeStyle
+     * @return string
+     */
+    private function getCustomDateFormat(string $locale, int $dateStyle, int $timeStyle): ?string
+    {
+        $customDateFormat = null;
+        if ($dateStyle !== \IntlDateFormatter::NONE && isset(self::CUSTOM_DATE_FORMATS[$locale][$dateStyle])) {
+            $customDateFormat = self::CUSTOM_DATE_FORMATS[$locale][$dateStyle];
+            if ($timeStyle !== \IntlDateFormatter::NONE) {
+                $timeFormat = (new \IntlDateFormatter($locale, \IntlDateFormatter::NONE, $timeStyle))
+                    ->getPattern();
+                $customDateFormat .= ' ' . $timeFormat;
+            }
+        }
+
+        return $customDateFormat;
+    }
+
+    /**
+     * Set 4 places for year value in format string
+     *
+     * @param string $format
+     * @return string
+     */
+    private function setFourYearPlaces(string $format): string
+    {
+        return preg_replace(
+            '/(?<!y)yy(?!y)/',
+            'y',
+            $format
+        );
+    }
+}
diff --git a/vendor/magento/framework/Stdlib/DateTime/Timezone.php b/vendor/magento/framework/Stdlib/DateTime/Timezone.php
index 118a3e053bd..1dfc621b1e1 100644
--- a/vendor/magento/framework/Stdlib/DateTime/Timezone.php
+++ b/vendor/magento/framework/Stdlib/DateTime/Timezone.php
@@ -12,6 +12,7 @@ use Magento\Framework\App\ScopeResolverInterface;
 use Magento\Framework\Exception\LocalizedException;
 use Magento\Framework\Locale\ResolverInterface;
 use Magento\Framework\Phrase;
+use Magento\Framework\Stdlib\DateTime\Intl\DateFormatterFactory;
 
 /**
  * Timezone library
@@ -60,6 +61,11 @@ class Timezone implements TimezoneInterface
      */
     protected $_localeResolver;
 
+    /**
+     * @var DateFormatterFactory
+     */
+    private $dateFormatterFactory;
+
     /**
      * @param ScopeResolverInterface $scopeResolver
      * @param ResolverInterface $localeResolver
@@ -67,6 +73,7 @@ class Timezone implements TimezoneInterface
      * @param ScopeConfigInterface $scopeConfig
      * @param string $scopeType
      * @param string $defaultTimezonePath
+     * @param DateFormatterFactory $dateFormatterFactory
      */
     public function __construct(
         ScopeResolverInterface $scopeResolver,
@@ -74,7 +81,8 @@ class Timezone implements TimezoneInterface
         \Magento\Framework\Stdlib\DateTime $dateTime,
         ScopeConfigInterface $scopeConfig,
         $scopeType,
-        $defaultTimezonePath
+        $defaultTimezonePath,
+        DateFormatterFactory $dateFormatterFactory
     ) {
         $this->_scopeResolver = $scopeResolver;
         $this->_localeResolver = $localeResolver;
@@ -82,6 +90,7 @@ class Timezone implements TimezoneInterface
         $this->_defaultTimezonePath = $defaultTimezonePath;
         $this->_scopeConfig = $scopeConfig;
         $this->_scopeType = $scopeType;
+        $this->dateFormatterFactory = $dateFormatterFactory;
     }
 
     /**
@@ -117,11 +126,15 @@ class Timezone implements TimezoneInterface
      */
     public function getDateFormat($type = \IntlDateFormatter::SHORT)
     {
-        return (new \IntlDateFormatter(
-            $this->_localeResolver->getLocale(),
-            $type,
-            \IntlDateFormatter::NONE
-        ))->getPattern();
+        $formatter = $this->dateFormatterFactory->create(
+            (string)$this->_localeResolver->getLocale(),
+            (int)$type,
+            \IntlDateFormatter::NONE,
+            null,
+            false
+        );
+
+        return $formatter->getPattern();
     }
 
     /**
@@ -129,11 +142,13 @@ class Timezone implements TimezoneInterface
      */
     public function getDateFormatWithLongYear()
     {
-        return preg_replace(
-            '/(?<!y)yy(?!y)/',
-            'Y',
-            $this->getDateFormat()
+        $formatter = $this->dateFormatterFactory->create(
+            (string)$this->_localeResolver->getLocale(),
+            \IntlDateFormatter::SHORT,
+            \IntlDateFormatter::NONE
         );
+
+        return $formatter->getPattern();
     }
 
     /**
@@ -141,11 +156,13 @@ class Timezone implements TimezoneInterface
      */
     public function getTimeFormat($type = \IntlDateFormatter::SHORT)
     {
-        return (new \IntlDateFormatter(
-            $this->_localeResolver->getLocale(),
+        $formatter = $this->dateFormatterFactory->create(
+            (string)$this->_localeResolver->getLocale(),
             \IntlDateFormatter::NONE,
-            $type
-        ))->getPattern();
+            (int)$type
+        );
+
+        return $formatter->getPattern();
     }
 
     /**
@@ -161,10 +178,8 @@ class Timezone implements TimezoneInterface
      */
     public function date($date = null, $locale = null, $useTimezone = true, $includeTime = true)
     {
-        $locale = $locale ?: $this->_localeResolver->getLocale();
-        $timezone = $useTimezone
-            ? $this->getConfigTimezone()
-            : date_default_timezone_get();
+        $locale = (string)($locale ?: $this->_localeResolver->getLocale());
+        $timezone = (string)($useTimezone ? $this->getConfigTimezone() : date_default_timezone_get());
 
         switch (true) {
             case (empty($date)):
@@ -174,15 +189,13 @@ class Timezone implements TimezoneInterface
             case ($date instanceof \DateTimeImmutable):
                 return new \DateTime($date->format('Y-m-d H:i:s'), $date->getTimezone());
             case (!is_numeric($date)):
-                $timeType = $includeTime ? \IntlDateFormatter::SHORT : \IntlDateFormatter::NONE;
-                $formatter = new \IntlDateFormatter(
+                $date = $this->appendTimeIfNeeded((string)$date, (bool)$includeTime, $timezone, $locale);
+                $formatter = $this->dateFormatterFactory->create(
                     $locale,
                     \IntlDateFormatter::SHORT,
-                    $timeType,
-                    new \DateTimeZone($timezone)
+                    $includeTime ? \IntlDateFormatter::SHORT : \IntlDateFormatter::NONE,
+                    $timezone
                 );
-
-                $date = $this->appendTimeIfNeeded($date, $includeTime);
                 $date = $formatter->parse($date) ?: (new \DateTime($date))->getTimestamp();
                 break;
         }
@@ -206,25 +219,9 @@ class Timezone implements TimezoneInterface
             case ($date instanceof \DateTimeImmutable):
                 $date = $date->setTimezone($timezone);
                 break;
-            case (!is_numeric($date)):
-                $timeType = $includeTime ? \IntlDateFormatter::SHORT : \IntlDateFormatter::NONE;
-                $formatter = new \IntlDateFormatter(
-                    $this->_localeResolver->getLocale(),
-                    \IntlDateFormatter::SHORT,
-                    $timeType,
-                    $timezone
-                );
-                $timestamp = $formatter->parse($date);
-                $date = $timestamp
-                    ? (new \DateTime('@' . $timestamp))->setTimezone($timezone)
-                    : new \DateTime($date, $timezone);
-                break;
-            case (is_numeric($date)):
-                $date = new \DateTime('@' . $date);
-                $date = $date->setTimezone($timezone);
-                break;
             default:
-                $date = new \DateTime($date, $timezone);
+                $date = new \DateTime(is_numeric($date) ? '@' . $date : $date);
+                $date->setTimezone($timezone);
                 break;
         }
 
@@ -297,7 +294,6 @@ class Timezone implements TimezoneInterface
         if (!($date instanceof \DateTimeInterface)) {
             $date = new \DateTime($date);
         }
-
         if ($timezone === null) {
             if ($date->getTimezone() == null || $date->getTimezone()->getName() == 'UTC'
                 || $date->getTimezone()->getName() == '+00:00'
@@ -308,14 +304,20 @@ class Timezone implements TimezoneInterface
             }
         }
 
-        $formatter = new \IntlDateFormatter(
-            $locale ?: $this->_localeResolver->getLocale(),
-            $dateType,
-            $timeType,
-            $timezone,
+        $formatter = $this->dateFormatterFactory->create(
+            (string)($locale ?: $this->_localeResolver->getLocale()),
+            (int)($dateType ?? \IntlDateFormatter::SHORT),
+            (int)($timeType ?? \IntlDateFormatter::SHORT),
             null,
-            $pattern
+            false
         );
+        if ($timezone) {
+            $formatter->setTimeZone($timezone);
+        }
+        if ($pattern) {
+            $formatter->setPattern($pattern);
+        }
+
         return $formatter->format($date);
     }
 
@@ -335,7 +337,7 @@ class Timezone implements TimezoneInterface
                 throw new LocalizedException(
                     new Phrase(
                         'The DateTime object timezone needs to be the same as the "%1" timezone in config.',
-                        $this->getConfigTimezone()
+                        [$this->getConfigTimezone()]
                     )
                 );
             }
@@ -347,17 +349,42 @@ class Timezone implements TimezoneInterface
     }
 
     /**
-     * Retrieve date with time
+     * Append time to DateTime
      *
      * @param string $date
-     * @param bool $includeTime
+     * @param boolean $includeTime
+     * @param string $timezone
+     * @param string $locale
      * @return string
+     * @throws LocalizedException
      */
-    private function appendTimeIfNeeded($date, $includeTime)
+    private function appendTimeIfNeeded(string $date, bool $includeTime, string $timezone, string $locale)
     {
         if ($includeTime && !preg_match('/\d{1}:\d{2}/', $date)) {
-            $date .= " 0:00am";
+            $formatter = $this->dateFormatterFactory->create(
+                $locale,
+                \IntlDateFormatter::SHORT,
+                \IntlDateFormatter::NONE,
+                $timezone
+            );
+            $timestamp = $formatter->parse($date);
+            if (!$timestamp) {
+                throw new LocalizedException(
+                    new Phrase(
+                        'Could not append time to DateTime'
+                    )
+                );
+            }
+
+            $formatterWithHour = $this->dateFormatterFactory->create(
+                $locale,
+                \IntlDateFormatter::SHORT,
+                \IntlDateFormatter::SHORT,
+                $timezone
+            );
+            $date = $formatterWithHour->format($timestamp);
         }
+
         return $date;
     }
 }
