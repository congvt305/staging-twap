type Query {
    advreview (
        productId: Int! @doc(description: "Product ID"),
        page: Int! @doc(description: "Page"),
        amreviewDir: String @doc(description: "Direction."),
        amreviewSort: String @doc(description: "Sort by."),
        stars: Int @doc(description: "Filter by stars."),
        withImages: Boolean @doc(description: "Filter with images."),
        verifiedBuyer: Boolean @doc(description: "Filter verified buyer."),
        isRecommended: Boolean @doc(description: "Filter recommended."),
    ): ReviewsData @resolver(class: "Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Query\\Review"),
    amReviewSetting: AmReviewSetting @resolver(class: "Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Query\\Setting"),
    amReviewWidget (
        widgetId: Int! @doc(description: "Widget ID"),
        categoryId: Int @doc(description: "Category ID"),
        productId: Int @doc(description: "Product ID")
    ): AmReviewWidget @resolver(class: "Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Query\\Widget")
}

type Mutation {
    addAdvReview (input: AddAdvReviewInput): AddAdvReviewOutput
    @resolver(class: "\\Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Mutation\\Post") @doc(description:"Add review"),
    addAdvComment (input: AddAdvCommentInput): AddAdvCommentOutput
    @resolver(class: "\\Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Mutation\\Comment") @doc(description:"Add comment"),
    addAdvVote (input: AddAdvVoteInput): AddAdvVoteOutput
    @resolver(class: "\\Amasty\\AdvancedReviewGraphQl\\Model\\Resolver\\Mutation\\Vote") @doc(description:"Add vote")
}

type ReviewsData {
    totalRecords: Int @doc(description: "Total records."),
    totalRecordsFiltered: Int @doc(description: "Total records with applied filters."),
    items: [Review] @doc(description: "Reviews."),
    ratingSummary: Int @doc(description: "Rating summary."),
    ratingSummaryValue: Float @doc(description: "Rating summary value."),
    recomendedPercent: Int @doc(description: "Recomended percent."),
    detailedSummary: DetailedSummary @doc(description: "Detailed summary.")
}

type Review {
    review_id: Int @doc(description: "Review id."),
    created_at: String @doc(description: "Created at."),
    entity_id: Int @doc(description: "Entity id."),
    entity_pk_value: Int @doc(description: "Product id."),
    status_id: Int @doc(description: "Status id."),
    answer: String @doc(description: "Answer."),
    verified_buyer: Int @doc(description: "Verified buyer."),
    is_recommended: Boolean @doc(description: "Reomended."),
    detail_id: Int @doc(description: "Detail id."),
    title: String @doc(description: "Review title."),
    detail: String @doc(description: "Review detail."),
    nickname: String @doc(description: "Reviewer name."),
    customer_id: Int @doc(description: "Reviewer id."),
    like_about: String @doc(description: "Advantages."),
    not_like_about: String @doc(description: "Disadvantages."),
    guest_email: String @doc(description: "Guest email."),
    entity_code: String @doc(description: "Entity code."),
    plus_review: String @doc(description: "Plus review."),
    minus_review: String @doc(description: "Minus review."),
    rating_votes: [RatingVote] @doc(description: "Rating votes."),
    images: [Images] @doc(description: "Images."),
    comments: [Comment] @doc(description: "Comments."),
}

type DetailedSummary {
    one: Int @doc(description: "One star."),
    two: Int @doc(description: "Two stars."),
    three: Int @doc(description: "Three stars."),
    four: Int @doc(description: "Four stars."),
    five: Int @doc(description: "Five stars."),
}

type RatingVote {
    vote_id: Int @doc(description: "Vote id."),
    option_id: Int @doc(description: "Option id."),
    customer_id: Int @doc(description: "Customer id."),
    entity_pk_value: Int @doc(description: "Product id."),
    rating_id: Int @doc(description: "Rating id."),
    review_id: Int @doc(description: "Review id."),
    percent: Int @doc(description: "Percent."),
    value: Int @doc(description: "Value."),
    rating_code: String @doc(description: "Rating code."),
    store_id: Int @doc(description: "Store id."),
}

type Images {
    full_path: String @doc(description: "Image full path."),
    resized_path: String @doc(description: "Resized image path."),
}

type Comment {
    id: Int @doc(description: "Comment id."),
    review_id: Int @doc(description: "Review id."),
    store_id: Int @doc(description: "Store id."),
    status: Int @doc(description: "Status."),
    customer_id: Int @doc(description: "Customer id."),
    message: String @doc(description: "Message."),
    nickname: String @doc(description: "Nickname."),
    email: String @doc(description: "Email."),
    session_id: String @doc(description: "Session id."),
    created_at: String @doc(description: "Created at."),
    updated_at: String @doc(description: "Updated at."),
}

type AmReviewSetting {
    isGDPREnabled: Boolean @doc(description: "GDPR Consent."),
    getGDPRText: String @doc(description: "Ð¡onsent Text."),
    getReviewImageWidth: String @doc(description: "Review Image Width."),
    isAllowReminder: Boolean @doc(description: "Review Reminder."),
    isCommentsEnabled: Boolean @doc(description: "Comments Enabled."),
    isGuestCanComment: Boolean @doc(description: "Guest Can Comment."),
    isReminderEnabled: Boolean @doc(description: "Reminder Enabled."),
    isRecommendFieldEnabled: Boolean @doc(description: "Recomended field enable."),
    isAllowGuest: Boolean @doc(description: "Allow guest."),
    isAllowAnswer: Boolean @doc(description: "Allow answer."),
    isAllowCoupons: Boolean @doc(description: "Allow coupons."),
    isAllowHelpful: Boolean @doc(description: "Allow helpful."),
    isAllowImages: Boolean @doc(description: "Allow images."),
    isImagesRequired: Boolean @doc(description: "Is Images Required."),
    slidesToShow: Int @doc(description: "Images to Show."),
    isToolbarDisplayed: Boolean @doc(description: "Toolbar displayed."),
    isSortingEnabled: Boolean @doc(description: "Sorting enabled."),
    isProsConsEnabled: Boolean @doc(description: "Pros and Cons."),
    isFilteringEnabled: Boolean @doc(description: "Sorting enabled."),
    availableOrders: [ReviewOrder] @doc(description: "Available orders."),
    availableFilters: [ReviewFilter] @doc(description: "Available filter."),
    perPage: Int @doc(description: "Reviews Per Page."),
    ratings: [Rating] @doc(description: "Available Ratings."),
    isGuestEmailShow: Boolean @doc(description: "Is Guest Email Showed.")
}

type AmReviewWidget {
    title: String,
    reviews_count: Int @doc(description: "Number of Reviews to Show."),
    current_category: Boolean @doc(description: "Reviews from Current Category Only."),
    current_product_category: Boolean @doc(description: "Reviews of Products which belong to the Same Categories Only."),
    review_type: Int @doc(description: "Reviews Type."),
    enable_slider: Boolean @doc(description: "Enable Slider."),
    items: [AmReviewWidgetItem]
}

type AmReviewWidgetItem {
    productUrl: String @doc(description: "Product URL."),
    name: String @doc(description: "Product Name."),
    image: ProductImage @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\Product\\ProductImage"),
    rating_votes: [RatingVote] @doc(description: "Rating votes."),
    recommendedHtml: String @doc(description: "Recommended Html."),
    reviewBy: String @doc(description: "Review By."),
    reviewMessage: String @doc(description: "Review Message."),
    date: String @doc(description: "Date."),
}

input AddAdvReviewInput {
    product_id: Int! @doc(description: "Product ID."),
    ratings: String! @doc(description: "Rating in Json format. Rating ID => Rating Value"),
    nickname: String! @doc(description: "Nickname."),
    title: String! @doc(description: "Summary."),
    detail: String! @doc(description: "Review."),
    guest_email: String @doc(description: "Email Address."),
    like_about: String @doc(description: "Advantages."),
    not_like_about: String @doc(description: "Disadvantages."),
    is_recommended: Boolean @doc(description: "Recommendation."),
    tmp_images_path: [String] @doc(description: "Path to tmp images location to save review images."),
    gdpr: Boolean @doc(description: "GDPR.")
}

type AddAdvReviewOutput {
    success: Boolean @doc(description: "Status.")
}

input AddAdvCommentInput {
    review_id: Int! @doc(description: "Review ID."),
    nickname: String @doc(description: "Nickname."),
    email: String @doc(description: "Email Address."),
    message: String! @doc(description: "Review.")
}

type AddAdvCommentOutput {
    success: Boolean @doc(description: "Status."),
    review: Review @doc(description: "Commented Review.")
}

input AddAdvVoteInput {
    review_id: Int! @doc(description: "Review ID."),
    type: String! @doc(description: "Nickname.")
}

type AddAdvVoteOutput {
    success: Boolean @doc(description: "Status."),
    review: Review @doc(description: "Commented Review.")
}

type ReviewFilter {
    label: String!,
    code: String!
}

type ReviewOrder {
    label: String!,
    code: String!
}

type Rating {
    rating_id: Int!,
    rating_code: String!,
    rating_options: [RatingOption]
}

type RatingOption {
    option_id: Int!,
    value: Int!
}
