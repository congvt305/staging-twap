<?php
/**
 * @author Eguana Team
 * @copyriht Copyright (c) 2020 Eguana {http://eguanacommerce.com}
 * Created by PhpStorm
 * User: abbas
 * Date: 20. 5. 26
 * Time: 오전 10:53
 */

namespace Amore\CustomerRegistration\Test\Unit\Model;

use Amore\CustomerRegistration\Helper\Data;
use Magento\Framework\Session\SessionManagerInterface;
use Amore\CustomerRegistration\Model\Verification;

/**
 * For the unit test of verification model
 * Class VerificationTest
 * @package Amore\CustomerRegistration\Test\Unit\Model
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class VerificationTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    private $helper;

    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    private $sessionMock;

    /**
     * @var Verification
     */
    private $object;

    protected function setUp():void
    {
        $this->helper = $this->createMock(Data::class);

        $this->sessionMock = $this
            ->getMockBuilder(SessionManagerInterface::class)
            ->setMethods(['setVerificationCode', 'setMobileNumber', 'getMobileNumber', 'getVerificationCode'])
            ->getMockForAbstractClass();

        $this->object = new Verification(
            $this->helper,
            $this->sessionMock
        );

        parent::setUp();
    }

    protected function tearDown(): void
    {
        $this->helper = null;
        $this->sessionMock = null;
        $this->object = null;
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * testVerificationModelInstance()
     * this will test verification model Instance
     */
    public function testVerificationModelInstance()
    {
        $this->assertInstanceOf(Verification::class, $this->object);
    }

    /**
     * To test digits only in the mobile number
     *
     */
    public function testMobileNumberOnlyDigits()
    {
        $mobileNumber = '10869227a';
        //$this->helper->expects($this->once())->method('getMinimumMobileNumberDigits')->will($this->returnValue(10));
        $result = $this->object->sendVerificationCode($mobileNumber);
        $this->assertEquals('Mobile number should have only digits', $result);

    }

    /**
     * To test digits mobile number minimum length
     *
     */
    public function testMobileMinimumLength()
    {
        $mobileNumber = 1086922;
        $this->helper->expects($this->exactly(2))->method('getMinimumMobileNumberDigits')->will($this->returnValue(10));
        $result = $this->object->sendVerificationCode($mobileNumber);
        $this->assertEquals('Mobile number digits can not be less than 10', $result);

    }

    /**
     * To test digits mobile number maximum length
     *
     */
    public function testMobileMaximumLength()
    {
        $mobileNumber = 123456789012;
        $this->helper->expects($this->once())->method('getMinimumMobileNumberDigits')->will($this->returnValue(10));
        $this->helper->expects($this->exactly(2))->method('getMaximumMobileNumberDigits')->will($this->returnValue(11));
        $result = $this->object->sendVerificationCode($mobileNumber);
        $this->assertEquals('Mobile number digits can not be more than 11', $result);

    }

    /**
     * To test digits mobile number maximum length
     *
     */
    public function testNullOrEmptyMobileNumber()
    {
        $result = $this->object->sendVerificationCode('');
        $this->assertEquals('Mobile number can not be null or empty', $result);
        $result = $this->object->sendVerificationCode('                              ');
        $this->assertEquals('Mobile number can not be null or empty', $result);
        $result = $this->object->sendVerificationCode(null);
        $this->assertEquals('Mobile number can not be null or empty', $result);
    }

    /**
     * To test send verification code
     * @param $mobileNumber
     * @dataProvider getMobileNumberProvider
     */
    public function testSendVerificationCode($mobileNumber)
    {
        $this->helper->expects($this->once())->method('getMinimumMobileNumberDigits')->will($this->returnValue(10));
        $this->helper->expects($this->once())->method('getMaximumMobileNumberDigits')->will($this->returnValue(11));
        $this->sessionMock->expects($this->once())->method('start')->will($this->returnSelf());
        $this->sessionMock->expects($this->once())->method('setVerificationCode')->will($this->returnValue(''));
        $this->sessionMock->expects($this->once())->method('setMobileNumber')->will($this->returnValue(''));
        $result = $this->object->sendVerificationCode($mobileNumber);
        $this->assertEquals(true, $result);

    }

    /**
     * @return array
     */
    public function getMobileNumberProvider()
    {
        return [
            ['1086292780'],
            ['01086922780'],
            ['1076951786'],
            ['01076951786']

        ];
    }

    /**
     * To verify mobile with related code
     * @param $mobileNumber
     * @param $verificationCode
     *
     * @dataProvider verificationDataProvider
     */
    public function testVerifySMSCode($mobileNumber, $verificationCode)
    {
        $this->helper->expects($this->once())->method('getMinimumMobileNumberDigits')->will($this->returnValue(10));
        $this->helper->expects($this->once())->method('getMaximumMobileNumberDigits')->will($this->returnValue(11));
        $this->sessionMock->expects($this->once())->method('getVerificationCode')->will($this->returnValue($verificationCode));
        $this->sessionMock->expects($this->once())->method('getMobileNumber')->will($this->returnValue($mobileNumber));
        $result = $this->object->verifyCode($mobileNumber, $verificationCode);
        $this->assertEquals(true, $result);
    }

    /**
     * @return array
     */
    public function verificationDataProvider()
    {
        return [
            ['1086292780', '3145'],
            ['01086922780', '4894'],
            ['1076951786', '6741'],
            ['01076951786', '4798']

        ];
    }
}