<?php
/**
 * Created by Eguana Team.
 * User: sonia
 * Date: 7/2/20
 * Time: 8:19 AM
 */

namespace Amore\GaTagging\Test\Unit\ViewModel;

use PHPUnit\Framework\TestCase;

class CommonDataTest extends TestCase
{


    /**
     * @var \Magento\Customer\Model\Session|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $customerSessionMock;
    /**
     * @var object
     */
    protected $commonData;
    /**
     * @var \Amore\GaTagging\Helper\Data|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $dataHelperMock;
    /**
     * @var \Magento\Framework\Stdlib\DateTime\DateTime|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $dateTimeFactoryMock;

    protected function setUp()
    {
        $objectManager = new \Magento\Framework\TestFramework\Unit\Helper\ObjectManager($this);
        $this->commonData = $objectManager->getObject(\Amore\GaTagging\ViewModel\CommonData ::class);
        parent::setUp(); // TODO: Change the autogenerated stub
        $objectManager = new \Magento\Framework\TestFramework\Unit\Helper\ObjectManager($this);


        $this->dataHelperMock = $this->getMockBuilder(\Amore\GaTagging\Helper\Data::class)
            ->disableOriginalConstructor()
            ->getMock();
        $this->customerSessionMock = $this->getMockBuilder(\Magento\Customer\Model\Session::class)
            ->disableOriginalConstructor()
            ->getMock();
        $this->dateTimeFactoryMock = $this->getMockBuilder(\Magento\Framework\Stdlib\DateTime\DateTimeFactory::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->commonData = $objectManager->getObject(
            \Amore\GaTagging\ViewModel\CommonData::class,
            [
                'dataHelper' => $this->dataHelperMock,
                'customerSession' => $this->customerSessionMock,
                'dateTimeFactory' => $this->dateTimeFactoryMock
            ]
        );
    }

    protected function tearDown()
    {
        $this->commonData = null;
    }

    public function testExecute()
    {
        $this->expectOutputString(''); // tell PHPUnit to expect '' as output
//        print_r("Hello World");
//        print "Ping";
//        echo "Pong";
        $out = "Foo";
        var_dump($out);
    }

    public function testGetCheckSum()
    {
        $result = 'eguana';
        $this->assertEquals(
            $result,
            $this->commonData->getCheckSum()
        );
    }
    public function testGetCustomerAge()
    {
        $result = '30';
        $dob = '1981-05-05';
        $this->assertEquals(
            $result,
            $this->commonData->getCustomerAge()
        );


    }

}
